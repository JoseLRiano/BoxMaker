{"version":3,"sources":["NewBoxForm.js","Box.js","BoxList.js","App.js","serviceWorker.js","index.js"],"names":["NewBoxForm","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","newBox","state","id","uuid","createBox","height","width","color","onSubmit","this","htmlFor","type","onChange","Component","Box","style","backgroundColor","onClick","removeBox","BoxList","boxes","filter","box","map","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kTAmEeA,E,kDA/DX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAOVC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAVhB,EAalBC,aAAe,SAACL,GACZA,EAAEM,iBACF,IAAMC,EAAM,2BAAQ,EAAKC,OAAb,IAAoBC,GAAIC,QACpC,EAAKZ,MAAMa,UAAUJ,GACrB,EAAKN,SAAS,CACVW,OAAQ,GACRC,MAAO,GACPC,MAAO,MAlBX,EAAKN,MAAQ,CACTI,OAAQ,GACRC,MAAO,GACPC,MAAO,IALG,E,qDAyBd,OACI,0BAAMC,SAAUC,KAAKX,cACjB,6BACA,2BAAOY,QAAQ,UAAf,WACI,2BACIC,KAAK,OACLf,KAAK,SACLM,GAAG,SACHL,MAAOY,KAAKR,MAAMI,OAClBO,SAAUH,KAAKjB,gBAGvB,6BACI,2BAAOkB,QAAQ,SAAf,UACA,2BACIC,KAAK,OACLf,KAAK,QACLM,GAAG,QACHL,MAAOY,KAAKR,MAAMK,MAClBM,SAAUH,KAAKjB,gBAGvB,6BACI,2BAAOkB,QAAQ,SAAf,UACA,2BACIC,KAAK,OACLf,KAAK,QACLM,GAAG,QACHL,MAAOY,KAAKR,MAAMM,MAClBK,SAAUH,KAAKjB,gBAGvB,oD,GA1DSqB,aCcVC,E,uKAbP,OACI,6BACA,yBAAKC,MAAO,CACRV,OAAO,GAAD,OAAKI,KAAKlB,MAAMc,OAAhB,MACNC,MAAM,GAAD,OAAKG,KAAKlB,MAAMe,MAAhB,MACLU,gBAAiBP,KAAKlB,MAAMgB,SAGhC,4BAAQU,QAASR,KAAKlB,MAAM2B,WAA5B,U,GAVML,aC0CHM,E,kDAvCX,WAAY5B,GAAO,IAAD,8BACd,cAAMA,IAMVa,UAAY,SAACJ,GACT,EAAKN,SAAS,CACV0B,MAAM,GAAD,mBAAM,EAAKnB,MAAMmB,OAAjB,CAAwBpB,OAPjC,EAAKC,MAAQ,CACTmB,MAAQ,IAHE,E,sDAaRlB,GACNO,KAAKf,SAAS,CACV0B,MAAOX,KAAKR,MAAMmB,MAAMC,QAAO,SAAAC,GAAG,OAAIA,EAAIpB,KAAOA,S,+BAIhD,IAAD,OACEkB,EAAQX,KAAKR,MAAMmB,MAAMG,KAAI,SAAAD,GAAG,OAClC,kBAAC,EAAD,CACIE,IAAKF,EAAIpB,GACTA,GAAIoB,EAAIpB,GACRI,MAAOgB,EAAIhB,MACXD,OAAQiB,EAAIjB,OACZE,MAAOe,EAAIf,MACXW,UAAW,kBAAM,EAAKA,UAAUI,EAAIpB,UAG5C,OACI,6BACI,kBAAC,EAAD,CAAYE,UAAWK,KAAKL,YAC3BgB,O,GAlCKP,a,MCQPY,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.024c9970.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport uuid from 'uuid/dist/v4'\n\nclass NewBoxForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            height: \"\",\n            width: \"\",\n            color: \"\"\n        }\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const newBox = { ...this.state, id: uuid()};\n        this.props.createBox(newBox);\n        this.setState({\n            height: \"\",\n            width: \"\",\n            color: \"\"\n        })\n    }\n\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div>\n                <label htmlFor=\"height\">Height </label>\n                    <input \n                        type=\"text\" \n                        name=\"height\"\n                        id=\"height\"\n                        value={this.state.height}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"width\">Width </label>\n                    <input \n                        type=\"text\" \n                        name=\"width\"\n                        id=\"width\"\n                        value={this.state.width}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"color\">Color </label>\n                    <input \n                        type=\"text\" \n                        name=\"color\"\n                        id=\"color\"\n                        value={this.state.color}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <button>Add New Box</button>\n            </form>\n        );\n    }\n}\n\nexport default NewBoxForm;","import React, { Component } from 'react';\n\nclass Box extends Component {\n    render(){\n        return (\n            <div>\n            <div style={{\n                height: `${this.props.height}em`,\n                width: `${this.props.width}em`,\n                backgroundColor: this.props.color\n            }}\n            />\n            <button onClick={this.props.removeBox}>X</button>\n            </div>\n        );\n    }\n}\nexport default Box;","import React, { Component } from 'react';\nimport NewBoxForm from './NewBoxForm';\nimport Box from './Box';\n\nclass BoxList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            boxes : [ ]\n        };\n    }\n\n    createBox = (newBox) => {\n        this.setState({\n            boxes: [...this.state.boxes, newBox]\n        });\n    }\n\n    removeBox(id) {\n        this.setState({\n            boxes: this.state.boxes.filter(box => box.id !== id)\n        })\n    }\n\n    render(){\n        const boxes = this.state.boxes.map(box => (\n            <Box \n                key={box.id}\n                id={box.id}\n                width={box.width}\n                height={box.height}\n                color={box.color}\n                removeBox={() => this.removeBox(box.id)}\n            />\n        ))\n        return (\n            <div>\n                <NewBoxForm createBox={this.createBox}/>\n                {boxes}\n            </div>\n        );\n    }\n}\n\nexport default BoxList;","import React from 'react';\nimport BoxList from './BoxList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}